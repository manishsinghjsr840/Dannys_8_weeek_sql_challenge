CREATE OR REPLACE DATABASE PIZZA_RUNNER;


CREATE OR REPLACE TABLE runners (
  runner_id INTEGER,
  registration_date DATE
);
INSERT INTO runners
  (runner_id, registration_date)
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


CREATE OR REPLACE TABLE customer_orders (
  order_id INTEGER,
  customer_id INTEGER,
  pizza_id INTEGER,
  exclusions VARCHAR(4),
  extras VARCHAR(4),
  order_time TIMESTAMP
);

INSERT INTO customer_orders
  (order_id, customer_id, pizza_id, exclusions, extras, order_time)
VALUES
  (1, 101, 1, '', '', '2020-01-01 18:05:02'),
  (2, 101, 1, '', '', '2020-01-01 19:00:52'),
  (3, 102, 1, '', '', '2020-01-02 23:51:23'),
  (3, 102, 2, '', NULL, '2020-01-02 23:51:23'),
  (4, 103, 1, '4', '', '2020-01-04 13:23:46'),
  (4, 103, 1, '4', '', '2020-01-04 13:23:46'),
  (4, 103, 2, '4', '', '2020-01-04 13:23:46'),
  (5, 104, 1, 'null', '1', '2020-01-08 21:00:29'),
  (6, 101, 2, 'null', 'null', '2020-01-08 21:03:13'),
  (7, 105, 2, 'null', '1', '2020-01-08 21:20:29'),
  (8, 102, 1, 'null', 'null', '2020-01-09 23:54:33'),
  (9, 103, 1, '4', '1, 5', '2020-01-10 11:22:59'),
  (10, 104, 1, 'null', 'null', '2020-01-11 18:34:49'),
  (10, 104, 1, '2, 6', '1, 4', '2020-01-11 18:34:49');


CREATE OR REPLACE TABLE runner_orders (
  order_id INTEGER,
  runner_id INTEGER,
  pickup_time VARCHAR(19),
  distance VARCHAR(7),
  duration VARCHAR(10),
  cancellation VARCHAR(23)
);

INSERT INTO runner_orders
  (order_id, runner_id, pickup_time, distance, duration, cancellation)
VALUES
  (1, 1, '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  (2, 1, '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  (3, 1, '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  (4, 2, '2020-01-04 13:53:03', '23.4', '40', NULL),
  (5, 3, '2020-01-08 21:10:57', '10', '15', NULL),
  (6, 3, 'null', 'null', 'null', 'Restaurant Cancellation'),
  (7, 2, '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  (8, 2, '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  (9, 2, 'null', 'null', 'null', 'Customer Cancellation'),
  (10, 1, '2020-01-11 18:50:20', '10km', '10minutes', 'null');


CREATE OR REPLACE TABLE pizza_names (
  pizza_id INTEGER,
  pizza_name TEXT
);
INSERT INTO pizza_names
  (pizza_id, pizza_name)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


CREATE OR REPLACE TABLE pizza_recipes (
  pizza_id INTEGER,
  toppings TEXT
);
INSERT INTO pizza_recipes
  (pizza_id, toppings)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


CREATE OR REPLACE TABLE pizza_toppings (
  topping_id INTEGER,
  topping_name TEXT
);
INSERT INTO pizza_toppings
  (topping_id, topping_name)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');


SELECT * FROM runners ;
SELECT * FROM runner_orders ;
SELECT * FROM customer_orders ;
SELECT * FROM pizza_names;
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;



UPDATE runner_orders
SET CANCELLATION = NULL
WHERE CANCELLATION = 'null';

UPDATE runner_orders
SET CANCELLATION = NULL
WHERE CANCELLATION = '';


UPDATE runner_orders
SET PICKUP_TIME = NULL
WHERE PICKUP_TIME IN('','null');

ALTER TABLE runner_orders
ALTER COLUMN PICKUP_TIME TYPE TIMESTAMP;

ALTER TABLE runner_orders
ADD COLUMN PICKUP_TIME_NEW TIMESTAMP;



UPDATE RUNNER_ORDERS
SET PICKUP_TIME_NEW= CAST(PICKUP_TIME AS TIMESTAMP)
WHERE PICKUP_TIME IS NOT NULL;

ALTER TABLE RUNNER_ORDERS
DROP COLUMN PICKUP_TIME ;

ALTER TABLE RUNNER_ORDERS
RENAME COLUMN PICKUP_TIME_NEW TO PICKUP_TIME ;




DESCRIBE TABLE RUNNER_ORDERS;











UPDATE runner_orders
SET distance = REGEXP_REPLACE(distance, '[^0-9.]+', '')
WHERE distance IS NOT NULL;




UPDATE runner_orders
SET DURATION = NULL
WHERE DURATION = 'null';



UPDATE runner_orders
SET DURATION = REGEXP_REPLACE(DURATION, '[^0-9.]+', '')
WHERE DURATION IS NOT NULL;

ALTER TABLE runner_orders
ADD COLUMN DURATION_NEW INT;

UPDATE RUNNER_ORDERS
SET DURATION_NEW=CAST(DURATION AS INT)
WHERE DURATION IS NOT NULL;

SELECT* FROM RUNNER_ORDERS;

ALTER TABLE RUNNER_ORDERS
DROP COLUMN DURATION;

ALTER TABLE RUNNER_ORDERS
RENAME COLUMN DURATION_NEW TO DURATION;


ALTER TABLE runner_orders
ALTER COLUMN distance TYPE INT;


ALTER TABLE runner_orders
ADD COLUMN DISTANCE_NEW DECIMAL(5,1);

ALTER TABLE runner_orders
RENAME COLUMN DISTANCE_NEW TO DISTANCE ;





UPDATE RUNNER_ORDERS
SET DISTANCE_NEW = CAST(distance AS DECIMAL(5,1))
WHERE distance <> '' AND distance REGEXP '^-?[0-9]+(\.[0-9]+)?$';


SELECT * FROM customer_orders ;

UPDATE CUSTOMER_ORDERS
SET EXCLUSIONS = NULL
WHERE EXCLUSIONS IN ('null', '');

UPDATE CUSTOMER_ORDERS
SET EXTRAS= NULL
WHERE EXTRAS IN ('null', '');


SELECT * FROM runners ;
SELECT * FROM runner_orders ;
SELECT * FROM customer_orders ;
SELECT * FROM pizza_names;
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;


--Q1. How many pizzas were ordered?
 SELECT COUNT(PIZZA_ID) AS TOTAL_NO_OF_PIZZA_ORDERED FROM CUSTOMER_ORDERS;

 --Q2. How many unique customer orders were made?
  SELECT COUNT(DISTINCT (ORDER_ID)) AS TOTAL_NO_OF_PIZZA_ORDERED FROM CUSTOMER_ORDERS;
 
--Q3. How many successful orders were delivered by each runner?

SELECT RUNNER_ID, COUNT(ORDER_ID)AS successful_orders FROM RUNNER_ORDERS WHERE CANCELLATION IS NULL GROUP BY RUNNER_ID;

--Q4. How many of each type of pizza was delivered?
SELECT P.PIZZA_NAME,COUNT(C.ORDER_ID) AS NO_OF_DELIVERED
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R ON C.ORDER_ID=R.ORDER_ID 
INNER JOIN
pizza_names P ON C.PIZZA_ID=P.PIZZA_ID
WHERE R.CANCELLATION IS NULL
GROUP BY PIZZA_NAME
ORDER BY 2 DESC;


--Q5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT (C.CUSTOMER_ID),P.PIZZA_NAME,COUNT(P.PIZZA_NAME)
FROM CUSTOMER_ORDERS C INNER JOIN RUNNER_ORDERS R ON C.ORDER_ID=R.ORDER_ID 
INNER JOIN
pizza_names P ON C.PIZZA_ID=P.PIZZA_ID
GROUP BY C.CUSTOMER_ID,P.PIZZA_NAME
ORDER BY 1,3 ASC;


--Q6. What was the maximum number of pizzas delivered in a single order?

SELECT * FROM runner_orders ;
SELECT * FROM customer_orders ;


select c.order_id,count(c.pizza_id) as 
from customer_orders c inner join runner_orders r
on c.order_id=r.order_id
where r.cancellation is null 
group by 1
order by 2 desc limit 1;



--Q7. For each customer, how many delivered pizzas had at least 1 change, and how many had no changes?

  select C.CUSTOMER_ID, 
       sum (case 
            when C.EXCLUSIONS is not null or C.EXTRAS is not null then 1
             else 0
             end )as At_least_1_change,
       sum  (case 
             when C.EXCLUSIONS is null and  C.EXTRAS is  null then 1  
             else 0
             end )as No_changes

from customer_orders C inner join runner_orders R
on C.ORDER_ID=R.ORDER_ID where R.DISTANCE is not null
group by C.customer_id order by 1;




--Q8. How many pizzas were delivered that had both exclusions and extras?

WITH CTE AS (
select C.ORDER_ID , 
             SUM(case 
            when C.EXCLUSIONS is not null and C.EXTRAS is not null then 1
             else 0
             end )as BOTH_EXCLUSION_EXTRAS
      
from customer_orders C inner join runner_orders R
on C.ORDER_ID=R.ORDER_ID where R.DISTANCE is not null 
group by C.ORDER_ID order by 1)
SELECT COUNT(ORDER_ID) AS NO_OF_PIZZA FROM CTE WHERE BOTH_EXCLUSION_EXTRAS<>0;



--Q9. What was the total volume of pizzas ordered for each hour of the day?


SELECT HOUR(ORDER_TIME)AS HOUR_ORDER,COUNT(ORDER_ID)NO_OF_PIZZA_EACH_HOUR FROM  CUSTOMER_ORDERS WHERE HOUR_ORDER IS NOT NULL  GROUP BY 1 ORDER BY 1 ;


--Q10. What was the volume of orders for each day of the week?
 SELECT TO_CHAR(ORDER_TIME,'DY')AS DAY,COUNT(ORDER_ID) TOTAL_PIZZA_ORDER FROM CUSTOMER_ORDERS GROUP BY 1 ORDER BY 2DESC;



--1. How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)


WITH runner_data AS (
    SELECT 
        runner_id,
        registration_date,
        CEIL(DATEDIFF('week', '2021-01-01', registration_date) + 1) AS RegistrationWeek
    FROM 
        runners
)
SELECT 
    RegistrationWeek,
    COUNT(runner_id) AS RunnerRegistrated
FROM 
    runner_data
GROUP BY 
    RegistrationWeek
ORDER BY 
    RegistrationWeek;


--Q2. What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pick up the order?
SELECT 
  R.RUNNER_ID,ROUND(AVG(DATEDIFF('MIN', C.ORDER_TIME, R.PICKUP_TIME)),1) AS AVG_time_difference_in_min
FROM 
  runner_orders R
INNER JOIN 
  CUSTOMER_ORDERS C ON C.ORDER_ID = R.ORDER_ID 
WHERE 
  R.PICKUP_TIME IS NOT NULL
  group by 1 ORDER BY 2;


  ---Q3. Is there any relationship between the number of pizzas and how long the order takes to prepare?
  
with cte as(
select c.order_id, count(c.order_id) as PizzaCount, AVG(round((DATEDIFF(minute, C.order_time, R.pickup_time)))) as Avgtime
from customer_orders as c
inner join runner_orders as r
on c.order_id = r.order_id
where distance != 0 
group by c.order_id)
select PizzaCount, Avgtime
from cte
group by PizzaCount,Avgtime;



--Q4. What was the average distance traveled for each customer?

SELECT C.CUSTOMER_ID,ROUND(AVG(R.DISTANCE),1)AVG_DISTANCE_FOR_EACH_CUST
FROM 
  runner_orders R
INNER JOIN 
  CUSTOMER_ORDERS C ON C.ORDER_ID = R.ORDER_ID 
WHERE 
  R.PICKUP_TIME IS NOT NULL
  group by 1 ORDER BY 1;

--Q5. What was the difference between the longest and shortest delivery times for all orders?
   SELECT MAX(DURATION)-MIN(DURATION) AS DIFF_DELIVERY_TIMES FROM RUNNER_ORDERS;

--Q6. What was the average speed for each runner for each delivery and do you notice any trend for these values?

SELECT RUNNER_ID,(ROUND(DISTANCE/(DURATION/60),2)) AS AVG_SPEED_IN_KM_PER_HOUR 
FROM RUNNER_ORDERS WHERE DISTANCE  IS NOT NULL;

--Q7. What is the successful delivery percentage for each runner?

SELECT * FROM runner_orders ;
SELECT * FROM customer_orders ;

SELECT runner_id, 
  round(count(distance)::numeric/ count(runner_id) * 100) AS delivery_percentage
FROM runner_orders
GROUP BY runner_id;


--C. Ingredient Optimisation
--What are the standard ingredients for each pizza?

SELECT P.TOPPING_NAME AS TOPPING_ID,COUNT(PIZZA_ID)AS PIZZA
FROM PIZZA_RECIPES LEFT JOIN LATERAL SPLIT_TO_TABLE(TOPPINGS,',')AS S INNER JOIN 
pizza_toppings P ON S.VALUE=P.TOPPING_ID 
GROUP BY P.TOPPING_NAME
HAVING PIZZA=2;


--CHEESE AND MUSHRROMS COMMON INBOTH THE PIAZZA 



--Q2.What was the most commonly added extra?

SELECT * FROM runners ;
SELECT * FROM runner_orders ;
SELECT * FROM customer_orders ;
SELECT * FROM pizza_names;
SELECT * FROM pizza_recipes;
SELECT * FROM pizza_toppings;


SELECT P.TOPPING_NAME,COUNT(PIZZA_ID) AS EXTRA FROM customer_orders LEFT JOIN LATERAL SPLIT_TO_TABLE(EXTRAS,',') AS S 
INNER JOIN pizza_toppings P ON P.TOPPING_ID=S.VALUE
GROUP BY P.TOPPING_NAME
LIMIT 1;

--BACON IS THE MOST most commonly added extra


--What was the most common exclusion?

SELECT P.TOPPING_NAME,COUNT(PIZZA_ID) AS EXTRA FROM customer_orders LEFT JOIN LATERAL SPLIT_TO_TABLE(EXCLUSIONS,',') AS S 
INNER JOIN pizza_toppings P ON P.TOPPING_ID=S.VALUE
GROUP BY P.TOPPING_NAME
LIMIT 1;

--Q4. Generate an order item for each record in the customers_orders table in the format of one of the following:
--Meat Lovers
--Lovers - Exclude Beef
--Meat Lovers - Extra Bacon
--Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers






SELECT 
T.TOPPING_NAME,
COUNT(DISTINCT pizza_id) as appears_on_x_many_pizzas
FROM pizza_recipes as R
LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
GROUP BY T.TOPPING_NAME
HAVING COUNT(DISTINCT pizza_id)=2;

-- 2. What was the most commonly added extra?
SELECT 
T.TOPPING_NAME,
COUNT(order_id) as extras
FROM customer_orders as co
LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
WHERE LENGTH(value)>0 AND value<>'null'
GROUP BY T.TOPPING_NAME
ORDER BY COUNT(order_id) DESC
LIMIT 1;

-- 3. What was the most common exclusion?
SELECT 
T.TOPPING_NAME,
COUNT(order_id) as exclusions
FROM customer_orders as co
LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
INNER JOIN pizza_toppings as T ON T.topping_id=S.value
WHERE LENGTH(value)>0 AND value<>'null'
GROUP BY T.TOPPING_NAME
ORDER BY COUNT(order_id) DESC
LIMIT 1;

-- 4. Generate an order item for each record in the customers_orders table in the format of one of the following:
    -- Meat Lovers
    -- Meat Lovers - Exclude Beef
    -- Meat Lovers - Extra Bacon
    -- Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers

WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    T.topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    T.topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT
    O.order_id,
    O.pizza_id,
    CASE 
    WHEN O.pizza_id = 1 THEN 'Meat Lovers'
    WHEN O.pizza_id = 2 THEN pizza_name
    END as pizza, 
    LISTAGG(DISTINCT EXT.topping_name, ', ') as extras,
    LISTAGG(DISTINCT EXC.topping_name, ', ') as exclusions
    FROM ORDERS AS O
    LEFT JOIN EXTRAS AS EXT ON EXT.order_id=O.order_id AND EXT.pizza_id=O.pizza_id
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    INNER JOIN pizza_names as PN on O.pizza_id = PN.pizza_id
    GROUP BY O.order_id,
    O.pizza_id,
    CASE 
    WHEN O.pizza_id = 1 THEN 'Meat Lovers'
    WHEN O.pizza_id = 2 THEN pizza_name
    END
)

SELECT 
order_id,
pizza_id,
CONCAT(pizza, 
CASE WHEN exclusions = '' THEN '' ELSE ' - Exclude ' || exclusions END,
CASE WHEN extras = '' THEN '' ELSE ' - Extra ' || extras END) as order_item
FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS
ORDER BY order_id; 




-- 5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
-- For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_id::int as topping_id,
    topping_name
    FROM ORDERS AS O
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    WHERE EXC.topping_id IS NULL

    UNION ALL 

    SELECT 
    order_id,
    pizza_id,
    topping_id::int as topping_id,
    topping_name
    FROM EXTRAS
    WHERE topping_id<>''
)
,TOPPING_COUNT AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_name,
    COUNT(*) as n
    FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS as O
    GROUP BY 
    O.order_id,
    O.pizza_id,
    O.topping_name
)
SELECT 
order_id,
pizza_id,
LISTAGG(
CASE
    WHEN n>1 THEN n || 'x' || topping_name
    ELSE topping_name
END,', ') as ingredient
FROM TOPPING_COUNT
GROUP BY order_id,
pizza_id;






-- 6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
WITH EXCLUSIONS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(exclusions,', ') as S
    WHERE LENGTH(value)>0 AND value<>'null'
)
,EXTRAS AS (
    SELECT 
    order_id,
    pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as co
    LEFT JOIN LATERAL SPLIT_TO_TABLE(extras,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
    WHERE LENGTH(value)>0 AND value<>'null'
)
,ORDERS AS (
    SELECT DISTINCT
    CO.order_id,
    CO.pizza_id,
    S.value as topping_id,
    topping_name
    FROM customer_orders as CO
    INNER JOIN pizza_recipes as PR on CO.pizza_id = PR.pizza_id
    LEFT JOIN LATERAL SPLIT_TO_TABLE(toppings,', ') as S
    INNER JOIN pizza_toppings as T on t.topping_id = S.value
)
,ORDERS_WITH_EXTRAS_AND_EXCLUSIONS AS (
    SELECT 
    O.order_id,
    O.pizza_id,
    O.topping_id::int as topping_id,
    topping_name
    FROM ORDERS AS O
    LEFT JOIN EXCLUSIONS AS EXC ON EXC.order_id=O.order_id AND EXC.pizza_id=O.pizza_id AND EXC.topping_id=O.topping_id 
    WHERE EXC.topping_id IS NULL

    UNION ALL 

    SELECT 
    order_id,
    pizza_id,
    topping_id::int as topping_id,
    topping_name
    FROM EXTRAS
    WHERE topping_id<>''
)

SELECT 
O.topping_name,
COUNT(O.pizza_id) as ingredient_count
FROM ORDERS_WITH_EXTRAS_AND_EXCLUSIONS as O
INNER JOIN runner_orders as ro on O.order_id = ro.order_id
WHERE pickup_time<>'null'
GROUP BY 
O.topping_name
ORDER BY COUNT(O.pizza_id) DESC






































  
