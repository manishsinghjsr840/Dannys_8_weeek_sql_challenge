CREATE or replace database  pizza_runner;
use pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  runner_id INTEGER,
  registration_date DATE
);
INSERT INTO runners
  (runner_id,registration_date)
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  order_id INTEGER,
  customer_id INTEGER,
  pizza_id INTEGER,
  exclusions VARCHAR(4),
  extras VARCHAR(4),
  order_time TIMESTAMP
);

INSERT INTO customer_orders
  (order_id, customer_id,  pizza_id,  exclusions, extras, order_time)
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  order_id INTEGER,
  runner_id INTEGER,
  pickup_time TIMESTAMP,
  distance VARCHAR(7),
  duration VARCHAR(10),
  cancellation VARCHAR(23)
);

INSERT INTO runner_orders
  ( order_id , runner_id, pickup_time, distance, duration, cancellation)
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', NULL, NULL, NULL, 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', NULL, NULL, NULL, 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  pizza_id INTEGER,
  pizza_name TEXT
);
INSERT INTO pizza_names
  (pizza_id, pizza_name)
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  pizza_id INTEGER,
  toppings TEXT
);
INSERT INTO pizza_recipes
  (pizza_id, toppings)
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  topping_id INTEGER,
  topping_name TEXT
);
INSERT INTO pizza_toppings
  (topping_id, topping_name)
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce');





SELECT
	runners.runner_id,
    runners.registration_date,
	COUNT(DISTINCT runner_orders.order_id) AS orders
FROM runners
INNER JOIN runner_orders
	ON runners.runner_id = runner_orders.runner_id
WHERE runner_orders.cancellation IS NOT NULL
GROUP BY
	runners.runner_id,
    runners.registration_date;


select * from runners;
select * from customer_orders;
select * from runner_orders;
select * from pizza_names;
select * from pizza_toppings;


--Data cleaning 

--FOR TABLE customer_orders  


CREATE OR REPLACE TABLE customer_orders_temp AS 
SELECT ORDER_ID,CUSTOMER_ID,PIZZA_ID,ORDER_TIME,
  CASE
    WHEN EXCLUSIONS IS NULL OR EXCLUSIONS = 'null' THEN ''
    ELSE EXCLUSIONS
  END AS EXCLUSIONS,
  CASE
    WHEN EXTRAS IS NULL OR EXTRAS = 'null' THEN ''
    ELSE EXTRAS
  END AS EXTRAS
FROM customer_orders;


--FOR TABLE  runner_orders

CREATE OR REPLACE TABLE runner_orders_temp AS 
SELECT ORDER_ID,RUNNER_ID,pickup_time,

 CASE
    WHEN DISTANCE IS NULL OR DISTANCE  = 'null' OR DISTANCE LIKE '%Km%' THEN ''
    ELSE DISTANCE 
  END AS DISTANCE,
 CASE
    WHEN DURATION IS NULL OR DURATION  = 'null' THEN ''
    ELSE DURATION 
  END AS DURATION,
CASE
    WHEN CANCELLATION IS NULL OR CANCELLATION  = 'null' THEN ''
    ELSE CANCELLATION
  END AS CANCELLATION
FROM runner_orders;

SELECT * FROM runner_orders_temp;

-- Step 1: Backup your data (optional but recommended before making changes).

-- Step 2: Add a new temporary column to hold the converted numeric values.
ALTER TABLE runner_orders_temp
ADD COLUMN DISTANCE_TEMP NUMBER;

-- Step 3: Update the new column with the converted data.
UPDATE runner_orders_temp
SET DISTANCE_TEMP = TRY_CAST(REPLACE(DISTANCE, 'km', '') AS NUMBER);

-- Step 4: Verify the data in the new column (optional).
SELECT * FROM runner_orders_temp;

-- Step 5: Once you're confident the data is correct, you can drop the original VARCHAR DISTANCE column.
ALTER TABLE runner_orders_temp
DROP COLUMN DISTANCE;

-- Step 6: Finally, rename the temporary column to the original column name if needed.
ALTER TABLE runner_orders_temp
RENAME COLUMN DISTANCE_TEMP TO DISTANCE;



describe TABLE  runner_orders_temp;


ALTER TABLE runner_orders_temp
ADD COLUMN DURATION_TEMP INTEGER;

UPDATE runner_orders_temp 
SET DURATION_TEMP = TRY_CAST(LEFT(DURATION,2) AS INTEGER);

ALTER TABLE runner_orders_temp
DROP COLUMN DURATION ;
ALTER TABLE runner_orders_temp
RENAME COLUMN DURATION_TEMP TO DURATION;


SELECT * FROM runner_orders_temp;
DESCRIBE TABLE runner_orders_temp;


SELECT * FROM pizza_recipes ;
select * from runners;
select * from customer_orders_temp;
select * from runner_orders_temp;
select * from pizza_names;
select * from pizza_toppings;

CREATE VIEW delivered_orders AS
SELECT C.*,R.RUNNER_ID,R.PICKUP_TIME,R.CANCELLATION,R.DISTANCE,R.DURATION FROM customer_orders_temp C
JOIN runner_orders_temp R
ON  C.ORDER_ID=R.ORDER_ID
WHERE distance IS NOT NULL;






--How many pizzas were ordered?

select count( PIZZA_ID) from customer_orders_temp ;

---How many unique customer orders were made?
select count(DISTINCT CUSTOMER_ID) from customer_orders_temp;

--How many successful orders were delivered by each runner?
select RUNNER_ID,count(ORDER_ID) from RUNNER_ORDERS_TEMP where DISTANCE is not null  group by RUNNER_ID;

--How many of each type of pizza was delivered?


SELECT PIZZA_NAME, COUNT(C.PIZZA_ID) AS PIZZA_COUNT
FROM customer_orders_temp C
JOIN RUNNER_ORDERS_TEMP R ON C.ORDER_ID = R.ORDER_ID
JOIN pizza_names P ON P.PIZZA_ID = C.PIZZA_ID
WHERE R.DISTANCE IS NOT NULL
GROUP BY PIZZA_NAME;

--How many Vegetarian and Meatlovers were ordered by each customer?

SELECT C.CUSTOMER_ID,  P.PIZZA_NAME, COUNT(PIZZA_NAME) AS PIZZA_COUNT
FROM customer_orders_temp C
JOIN pizza_names P ON P.PIZZA_ID = C.PIZZA_ID
GROUP BY PIZZA_NAME,C.CUSTOMER_ID
order by CUSTOMER_ID ;


--What was the maximum number of pizzas delivered in a single order?

select ORDER_ID,count(PIZZA_ID) as No_of_pizza from customer_orders_temp group by ORDER_ID order by count(PIZZA_ID) desc limit 1;

--For each customer, how many delivered pizzas had at least 1 change and how many had no changes?

SELECT customer_id,
   COUNT(
     CASE 
       WHEN exclusions <> '' OR extras <> '' THEN 1
     END
   ) AS changed,
   COUNT(
     CASE 
       WHEN exclusions = '' AND extras = '' THEN 1
     END
   ) AS unchanged 
FROM customer_orders_temp
GROUP BY customer_id
ORDER BY customer_id;

--Q8. How many pizzas were delivered that had both exclusions and extras?

SELECT COUNT(*) AS pizza_having_exclusions_n_extras
FROM  customer_orders_temp
WHERE exclusions <> '' 
AND extras <> '';


--Q9.What was the total volume of pizzas ordered for each hour of the day?
SELECT EXTRACT(HOUR FROM ORDER_TIME) AS HOUR_DAY,
COUNT(PIZZA_ID) AS  PIZZA 
FROM  customer_orders_temp
GROUP BY HOUR_DAY
ORDER BY HOUR_DAY;


--Q10.What was the volume of orders for each day of the week?

SELECT 
  CASE EXTRACT(DAYOFWEEK FROM ORDER_TIME)
    WHEN 1 THEN 'SUNDAY'
    WHEN 2 THEN 'MONDAY'
    WHEN 3 THEN 'TUESDAY'
    WHEN 4 THEN 'WEDNESDAY'
    WHEN 5 THEN 'THURSDAY'
    WHEN 6 THEN 'FRIDAY'
    WHEN 7 THEN 'SATURDAY'
  END AS DAY_NAME,
  COUNT(PIZZA_ID) AS PIZZA
FROM customer_orders_temp
GROUP BY DAY_NAME
ORDER BY DAY_NAME DESC;


--B. Runner and Customer Experience

--Q1How many runners signed up for each 1 week period? (i.e. week starts 2021-01-01)

SELECT COUNT (RUNNER_ID),EXTRACT(WEEK FROM REGISTRATION_DATE +3)AS WEEK_NO_OF_YEAR FROM runners GROUP BY WEEK_NO_OF_YEAR ;

--(+3 IS ADDED BECOUSE 01.01.2021 IS FRIDAY)select * from runners;
select * from customer_orders_temp;
select * from runner_orders_temp;
select * from pizza_names;
select * from pizza_toppings;
SELECT * FROM delivered_orders;
--Q2.What was the average time in minutes it took for each runner to arrive at the Pizza Runner HQ to pickup the order?

SELECT  AVG(DATEDIFF('MIN',ORDER_TIME,PICKUP_TIME)) 
FROM delivered_orders; --OPTION1(NOT CORRECT 100%)

WITH order_time_diff AS (
    SELECT DISTINCT order_id, DATEDIFF(SECOND, order_time, pickup_time) AS time_diff --- DATEDIFF IS USE TO FIND DIFFRENCE IN ORDERTIME AND PICKUP TIME 
    FROM delivered_orders
)
SELECT DATEADD(SECOND, ROUND(AVG(time_diff) + 30), '1970-01-01') AS rounded_time---Next, we use DATEADD(SECOND, ..., '1970-01-01') to add the calculated seconds to the reference date '1970-01-01', which is used as a starting point for Snowflake timestamp calculations.
FROM order_time_diff; --OPTION2( CORRECT 100%)

--Q3 Is there any relationship between the number of pizzas and how long the order takes to prepare?

WITH ORDER_PREPARE AS (
    SELECT DATEDIFF(MINUTE, order_time, pickup_time) AS TIME_DIFF, COUNT(PIZZA_ID) AS PIZZA_COUNT, ORDER_ID 
    FROM delivered_orders
    GROUP BY ORDER_ID, TIME_DIFF
)
SELECT AVG(TIME_DIFF),PIZZA_COUNT FROM ORDER_PREPARE GROUP BY PIZZA_COUNT ORDER BY PIZZA_COUNT;

--From the above, the more the pizzas contained in an order, the longer it takes for that order to be ready.
--Q4.What was the average distance travelled for each customer?

 SELECT CUSTOMER_ID,ROUND(AVG(DISTANCE),2) AS AVG_DIST FROM delivered_orders GROUP BY CUSTOMER_ID ORDER BY CUSTOMER_ID DESC;
 
--Q5. What was the difference between the longest and shortest delivery times for all orders?

SELECT MAX(duration) - MIN(duration) AS delivery_time_diff
FROM runner_orders_temp;


--Q6--What was the average speed for each runner for each delivery and do you notice any trend for these values?
 SELECT ORDER_ID,RUNNER_ID,ROUND(AVG(DISTANCE*60/DURATION),2) AS AVG_SPEED,DISTANCE FROM delivered_orders GROUP BY ORDER_ID,RUNNER_ID,DISTANCE ORDER BY ORDER_ID ;

--Of concern is Runner 2’s speed. There is a large variance between the lowest(34.50km/hr) and highest speeds (92.00km/hr). This should be investigated.

--Q7 What is the successful delivery percentage for each runner?

SELECT runner_id, 
  round(count(distance)::numeric/ count(runner_id) * 100) AS delivery_percentage
FROM runner_orders_temp
GROUP BY runner_id;

--C. Ingredient Optimisation
--Q1-What are the standard ingredients for each pizza?
select * from pizza_names;
SELECT * FROM pizza_recipes;
select * from pizza_toppings;


-- Normalize Pizza Recipe table
drop table if exists pizza_recipes1;
create table pizza_recipes1 
(
 pizza_id int,
    toppings int);
insert into pizza_recipes1
(pizza_id, toppings) 
values
(1,1),
(1,2),
(1,3),
(1,4),
(1,5),
(1,6),
(1,8),
(1,10),
(2,4),
(2,6),
(2,7),
(2,9),
(2,11),
(2,12);

select * from pizza_recipes1;

select PIZZA_NAME,LISTAGG(TOPPING_NAME, ',') AS Standard_Ingredients from 
pizza_recipes1 R JOIN pizza_names N
ON R.PIZZA_ID=N.PIZZA_ID JOIN pizza_toppings T
ON T.TOPPING_ID=R.TOPPINGS
GROUP BY PIZZA_NAME;

--What was the most commonly added extra?
--FROM HERE ONWARDS ALL THE QUESTIONS ARE HARD CODING (i.e WE NEED TO CREATE ANOTHER TABLE AND INSERT THE VALUES) SO, WE CLOSE THE CASE 2 HERE 


